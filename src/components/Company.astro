---
import type { MarkdownInstance } from "astro";
import Project from './Project.astro';
export interface ProjectInfo {
  name: string;
  time: string;
  link?: string;
  imgLink?: string; 
  type?: string;
  desc: MarkdownInstance<Record<string, any>>[];
}

export type PartialSome<T extends Object, K extends keyof T> = {
  [KK in keyof T]: KK extends K ? never : T[KK];
} & {
  [KKK in K]?: KKK extends keyof T ? T[KKK] : never
} 

export type InternshipInfo = PartialSome<ProjectInfo, 'desc'>

export interface CompanyInfo<T> {
  name: string;
  time: string;
  type: string;
  link: string; 
  projects: Array<T>;
}

export type WorkingExpData = CompanyInfo<ProjectInfo>

export type InternshipExpData = CompanyInfo<InternshipInfo>

export interface Props {
  companyInfo: WorkingExpData
}

const props = Astro.props as Props
---

<div class="company flex flex-col sm:flex-row sm:justify-between print:flex-row print:justify-between py-2 dark:text-gray-100">
  <span class="company-time sm:w-1/3 print:w-1/3">{props.companyInfo.time}</span>
  <div class="flex flex-1 justify-between ">
    <a href={ props.companyInfo.link ? props.companyInfo.link : '' } target="_blank" class="company-name hover:text-blue-400 transition-colors">{props.companyInfo.name}</a>
    <span class={`company-type ${props.companyInfo.type ? '' : 'hidden'}`}>{props.companyInfo.type}</span>
  </div>
</div>
{
  props.companyInfo.projects.map(item => (
    <Project projectInfo={item}></Project>
  ))
}
